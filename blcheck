#!/bin/bash
#
# MIT License
#
# Copyright (c) Intellex 2015
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# =============================================================================
#
# title             : blcheck
# description       : Test any domain against more than 100 black lists.
# author            : Intellex
# contributors      : Darko Poljak
# date              : 2020-10-08
# version           : 0.7.0
# usage             : blcheck [options] <domain_or_ip>
# reference         : http://multirbl.valli.org/list/
# code style        : https://google.github.io/styleguide/shell.xml
#
# =============================================================================

# Bash setup {
#set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

function cleanup {
	rm -f "${COUNT_FILE}" "${COUNT_FILE}.lock"
}

function handleError {
	cleanup
	error "Command was interrupted."
	exit 99
}
trap "handleError" SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM

#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ }

# Config {

    SCRIPT_PATH=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

    # How many tries and for how long to wait for DNS queries
    CONF_DNS_TRIES=2
    CONF_DNS_DURATION=3

    CONF_LIST_FILE="${SCRIPT_PATH}/list.default"

    # how many dig/host processes to run in parallel
    # this can be a number of threads (6)
    # or a percentage of cpu cores (75%)
    CONF_USE_OF_CORES="75%"

#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ }


# Definitions {

    COUNT_FILE=/tmp/blcheck.$$

    # Common regular expressions
    REGEX_IP='\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\)'
    REGEX_DOMAIN='\([a-zA-Z0-9]\+\(-[a-zA-Z0-9]\+\)*\.\)\+[a-zA-Z]\{2,\}'
    REGEX_TDL='\([a-zA-Z0-9]\+\(-[a-zA-Z0-9]\+\)*\.\)[a-zA-Z]\{2,\}$'
    REGEX_LIST='^[ \\t]*([^=#]+)(=(([^#])+))?(#(DNSBL|DNSWL|URIBL))?[ \\t]*$'

    # Colors
    if [[ $- == *i* ]]; then
        RED=$(tput setaf 1)
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        CLEAR=$(tput sgr0)
    else
        RED=$(tput -T xterm setaf 1)
        GREEN=$(tput -T xterm setaf 2)
        YELLOW=$(tput -T xterm setaf 3)
        CLEAR=$(tput -T xterm sgr0)
    fi

    # Define spinner
    SPINNER="-\|/"
    #SPINNER=".oO@*"
    #SPINNER="▉▊▋▌▍▎▏▎▍▌▋▊▉"
    #SPINNER="←↖↑↗→↘↓↙"
    #SPINNER="▁▂▃▄▅▆▇█▇▆▅▄▃▁"
    #SPINNER="▖▘▝▗"
    #SPINNER="┤┘┴└├┌┬┐"
    #SPINNER="◢◣◤◥"
    #SPINNER="◰◳◲◱"
    #SPINNER="◴◷◶◵"
    #SPINNER="◐◓◑◒"

    DNSSERVER=
    PLAIN=
    VERBOSE=0

#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ }

# Macros {

    # Verbose printing
    info() {
        if [[ ${VERBOSE} -ge "$1" ]]; then
            echo "$2"
        fi
    }

    # Error handling
    error() {
        echo "ERROR: $1" >&2
        exit 2
    }

    # Show progress
    progress() {
        local completed=$1

        # Bar
        local x=$((${completed} % ${#SPINNER} + 1))
        local BAR=$(echo ${SPINNER} | awk "{ print substr(\$0, ${x}, 1) }")
        if [[ -z "${PLAIN}" ]]; then
            printf "\r ";
        fi

        # BAR as printf arg so that backslash will be litteraly interpreted
        printf "[ %s %3s%% ] checking... %4s / $2  \r" "${BAR}" $((${completed} * 100 / $2)) "${completed}";
    }

    # Resolve the IP
    resolve() {
        local type=${2:-a}

        # IP already?
        local IP=$(echo "$1" | grep "^${REGEX_IP}$")
        if [[ "${IP}" ]]; then
            echo "${IP}"

        # Resolve domain
        else

            # Handle special resolve types
            case "${type}" in
                "ns" ) TYPE="ns"; REGEX="${REGEX_DOMAIN}\.$";;
                   * ) TYPE="a";  REGEX="${REGEX_IP}$";;
            esac

            case "${CMD}" in
                ${CMD_DIG} ) "${CMD}" ${DNSSERVER} +short -t "${TYPE}" +time=${CONF_DNS_DURATION} +tries=${CONF_DNS_TRIES} "$1" | grep -om 1 "${REGEX}";;
                ${CMD_HOST} ) "${CMD}" -t "${TYPE}" -W ${CONF_DNS_DURATION} -R ${CONF_DNS_TRIES} "$1" ${DNSSERVER} | tail -n1 | grep -om 1 "${REGEX}";;
            esac
        fi
    }

    # Result info for IP
    text() {
        # IP already?
        local IP=$(echo "$1" | grep "^${REGEX_IP}$")
        if [[ -n "${IP}" ]]; then
            echo "${IP}"

        # Resolve domain
        else

            local TYPE="txt"
            case "${CMD}" in
                ${CMD_DIG} ) "${CMD}" ${DNSSERVER} +short -t "${TYPE}" +time=${CONF_DNS_DURATION} +tries=${CONF_DNS_TRIES} "$1" ;;
                ${CMD_HOST} ) "${CMD}" -t "${TYPE}" -W ${CONF_DNS_DURATION} -R ${CONF_DNS_TRIES} "$1" ${DNSSERVER} | tail -n1 ;;
            esac
        fi
    }

    # Iterate over all blacklists
    check() {
        local I=$1
        local BL=$2

        local PREFIX=
        I=$((I + 1))

        # Parse list entry
        if [[ ! ${BL} =~ ${REGEX_LIST} ]]; then
            error "List entry ${BL} broken"
        fi
        local DOMAIN="${BASH_REMATCH[1]}"
        local FILTER="${BASH_REMATCH[3]}"
        local TYPE="${BASH_REMATCH[6]}"



        # What should we test
        if [[ "${TYPE}" != "URIBL" ]]; then
            # IP based test
            local TEST="${REVERSED}.${DOMAIN}."
        else
            # Domain name based test (URI)
            local TEST="${TARGET}.${DOMAIN}."
        fi


        # Make sure the info is shown if we are checking the servers
        if [[ "${VERIFY_BL}" && "${VERBOSE}" -lt 1 ]]; then
            local VERBOSE=1
        fi

        # Get the status
        local RESPONSE=$(resolve "${TEST}")

        # output has to be threat safe
        (
            flock -x 9

            # For verbose output
            if [[ "${VERBOSE}" -ge 1 ]]; then

                # Show percentage
                local STATUS=$(( $(cat "${COUNT_FILE}" | wc -l) + 1 ))
                STATUS=$(printf " %3s" "$((${STATUS} * 100 / ${COUNT} ))")
                STATUS="${STATUS}% "

                # Show additional info
                if [[ "${VERBOSE}" -ge 3 ]]; then
                    PREFIX=$(printf "%-60s" "${TEST}")
                else
                    PREFIX=$(printf "%-50s" "${DOMAIN}")
                fi

                PREFIX="${STATUS} ${PREFIX}"
                if [[ -z "${PLAIN}" ]]; then
                    printf "%s \b" "${PREFIX}"
                fi
            fi

            # Not blacklisted
            if [[ -z "${RESPONSE}" ]]; then

                # Make sure the server is viable
                ERROR=""
                if [[ "${VERIFY_BL}" ]]; then
                    TDL=$(echo "${DOMAIN}" | grep -om 1 '\([a-zA-Z0-9]\+\(-[a-zA-Z0-9]\+\)*\.\)[a-zA-Z]\{2,\}$')
                    if [[ ! "$(resolve "${TDL}" ns)" ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r"; fi
                        printf "%s%sUnreachable server%s\n" "${YELLOW}" "${PREFIX}" "${CLEAR}";
                        echo "I" >>"${COUNT_FILE}"
                        ERROR=TRUE
                    fi
                fi

                if [[ ! "${ERROR}" ]]; then
                    if [[ -n "${VERIFY_BL}" || "${VERBOSE}" -ge 1 ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r"; fi
                        printf "%s%s✓%s\n" "${CLEAR}" "${PREFIX}" "${CLEAR}";
                    fi
                    echo "P" >>"${COUNT_FILE}"
                fi;

            # Invalid response
            elif [[ ! "${RESPONSE}" =~ ${FILTER} ]]; then
                if [[ "${VERBOSE}" -ge 1 ]]; then
                    if [[ -z "${PLAIN}" ]]; then printf "\r"; fi
                    printf "%s%sinvalid response (%s)%s\n" "${YELLOW}" "${PREFIX}" "${RESPONSE}" "${CLEAR}";
                    printf "%s%${#PREFIX}s%s%s\n" "${YELLOW}" "TXT: " "$(text "${TEST}")" "${CLEAR}";
                fi;
                echo "I" >>"${COUNT_FILE}"

            # matched
            else
                if [[ "${TYPE}" != "DNSWL" ]]; then
                    if [[ "${VERBOSE}" -ge 1 ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r"; fi
                        printf "%s%sblacklisted (%s)%s\n" "${RED}" "${PREFIX}" "${RESPONSE}" "${CLEAR}";
                        printf "%s%${#PREFIX}s%s%s\n" "${RED}" "TXT: " "$(text "${TEST}")" "${CLEAR}";
                    elif [[ "${VERBOSE}" -ge 0 ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r                                                          "; printf "\r"; fi
                        printf "%s%s%s : %s\n" "${RED}" "${DOMAIN}" "${CLEAR}" "${RESPONSE}"
                    fi
                    echo "F" >>"${COUNT_FILE}"
                else
                    if [[ "${VERBOSE}" -ge 1 ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r"; fi
                        printf "%s%swhitelisted (%s)%s\n" "${GREEN}" "${PREFIX}" "${RESPONSE}" "${CLEAR}";
                        printf "%s%${#PREFIX}s%s%s\n" "${GREEN}" "TXT: " "$(text "${TEST}")" "${CLEAR}";
                    elif [[ "${VERBOSE}" -ge 0 ]]; then
                        if [[ -z "${PLAIN}" ]]; then printf "\r                                                          "; printf "\r"; fi
                        printf "%s%s%s : %s\n" "${GREEN}" "${DOMAIN}" "${CLEAR}" "${RESPONSE}"
                    fi
                    echo "W" >>"${COUNT_FILE}"
                fi
            fi
            if [[ "${VERBOSE}" -ge 0 ]]; then
                if [[ -z "${PLAIN}" ]]; then
                    progress "$(cat "${COUNT_FILE}" | wc -l)" "${COUNT}"
                fi
            fi
        ) 9>"${COUNT_FILE}.lock"
    }

    # Load list from file
    loadList() {

        # Make sure the file is readable
        if [[ -z "$1" ]]; then
            error "Option -l requires an additional parameter";
        elif [[ ! -r $1 ]]; then
            error "File $1 cannot be opened for reading, make sure it exists and that you have appropriate privileges"
        fi

        # Ignore commented and empty lines
        CONF_BLACKLISTS=$(cat "$1" | grep -vE "^(#|$)")
    }

    # Show help
    showHelp() {
        cat <<HELP
blcheck [options] <domain_or_IP>

Supplied domain must be full qualified domain name.
If the IP is supplied, the PTR check cannot be executed and will be skipped.

-d dnshost  Use host as DNS server to make lookups
-l file     Load blacklists from file, separated by space or new line
-c          Warn if the top level domain of the blacklist has expired
-v          Verbose mode, can be used multiple times (up to -vvv)
-q          Quiet mode with absolutely no output (useful for scripts)
-p          Plain text output (no coloring, no interactive status)
-t          Thread numbers (4) or percentage (75%) of cores to use
-h          The help you are just reading

Result of the script is the number of blacklisted entries. So if the supplied
IP is not blacklisted on any of the servers the result is 0.

HELP
        exit;
    }

#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ }

# Parse the params
while getopts :vqphcl:t:d: arg; do
    case "${arg}" in
        d) DNSSERVER="${OPTARG}";;
        l) CONF_LIST_FILE="${OPTARG}";;
        c) VERIFY_BL=TRUE;;
        v) VERBOSE=$((VERBOSE + 1));;
        q) VERBOSE=-1;;
        p) PLAIN=1 RED="" GREEN="" YELLOW="" CLEAR="" ;;
        t) CONF_USE_OF_CORES="${OPTARG}";;
        h) showHelp;;
        ?) error "Unknown option ${OPTARG}";;
    esac
done
shift $((OPTIND - 1))

# load list
loadList "${CONF_LIST_FILE}"

# Get the domain
if [[ $# -eq 0 ]]; then
    echo "Missing target domain or IP."
    showHelp
fi
TARGET=$1

# Some shells disable parsing backslash in echo statements by default
# Set the flag to enable echo to behave consistently across platforms
shopt -s xpg_echo

# Get the command we will use: dig or host
CMD_DIG=$(which dig)
if [[ "${CMD_DIG}" ]]; then
    if [[ -n "${DNSSERVER}" ]]; then
        DNSSERVER="@${DNSSERVER}"
    fi
    CMD=${CMD_DIG}
else
    CMD_HOST=$(which host)
    if [[ "${CMD_HOST}" ]]; then
        CMD=${CMD_HOST}
    fi
fi
if [[ -z "${CMD}" ]]; then
    error "Either dig or host command is required."
fi
info 3 "Using ${CMD} to reslove DNS queries"

# Parse IP
IP=$(resolve "${TARGET}")
if [[ -z "${IP}" ]]; then
    error "No DNS record found for ${TARGET}"
elif [[ "${IP}" != "${TARGET}" ]]; then
    DOMAIN=${TARGET}
    info 2 "Using ${TARGET} for target, resolved to ${IP}"
    TARGET_TYPE="domain"
else
    info 3 "Using ${TARGET} for target"
    TARGET_TYPE="ip"
fi

# Reverse the IP
REVERSED=$(echo "${IP}" | sed -ne "s~^${REGEX_IP}$~\4.\3.\2.\1~p")
info 3 "Using ${REVERSED} for reversed IP"

# Get the PTR
info 3 "Checking the PTR record"
case "${CMD}" in
    ${CMD_DIG} ) PTR=$("${CMD}" ${DNSSERVER} +short -x "${IP}" | sed s/\.$//);;
    ${CMD_HOST} ) PTR=$("${CMD}" "${IP}" ${DNSSERVER} | tail -n1 | grep -o '[^ ]\+$' | sed s/\.$//)
esac

# Validate PTR
if [[ -z "${PTR}" ]]; then
    info 0 "${YELLOW}Warning: PTR lookup failed${CLEAR}"

else

    # Match against supplied domain
    info 1 "PTR resolves to ${PTR}"
    if [[ -n "${DOMAIN}" ]]; then
        if [[ "${DOMAIN}" != "${PTR}" ]]; then
            info 0 "${YELLOW}Warning: PTR record does not match supplied domain: ${TARGET} != ${PTR}${CLEAR}"
        else
            info 1 "${GREEN}PTR record matches supplied domain ${PTR}${CLEAR}"
        fi
    fi
fi

# Filter out the blacklists
BLACKLISTS=""
COUNT_DNSBL=0
COUNT_DNSWL=0
COUNT_URIBL=0
COUNT=0
for BL in ${CONF_BLACKLISTS}; do
    if [[ "${BL}" ]]; then
        if [[ ${BL} =~ ${REGEX_LIST} ]]; then
            DOMAIN="${BASH_REMATCH[1]}"
            if [[ -n "${BASH_REMATCH[3]}" ]]; then
                FILTER="${BASH_REMATCH[3]}"
            else
                FILTER='127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})'
            fi
            if [[ -n "${BASH_REMATCH[6]}" ]]; then
                TYPE="${BASH_REMATCH[6]}"
            else
                TYPE='DNSBL'
            fi

            # Make sure the domain is a proper one
            TMP=$(echo "${DOMAIN}" | sed -e 's/^[ \t]*//' | grep ^"${REGEX_DOMAIN}"$)
            if [[ -z "${TMP}" ]]; then
               info 0 "${YELLOW}Warning: domain '${DOMAIN}' is not valid and will be ignored${CLEAR}"

            else
                if [[ "${TARGET_TYPE}" == 'ip' && "${TYPE}" == 'URIBL' ]]; then
                    info 0 "${GREEN}Notice: URIBL entry '${DOMAIN}' will be ignore, because ${TARGET} is an IP address${CLEAR}"
                else
                case "${TYPE}" in
                    "DNSBL") COUNT_DNSBL=$((COUNT_DNSBL + 1)) ;;
                    "DNSWL") COUNT_DNSWL=$((COUNT_DNSWL + 1)) ;;
                    "URIBL") COUNT_URIBL=$((COUNT_URIBL + 1)) ;;
                esac
                COUNT=$((COUNT + 1))

                # It is a proper blacklist
                if [[ "${BLACKLISTS}" ]]; then
                    BLACKLISTS=$(echo "${BLACKLISTS}\n${DOMAIN}=${FILTER}#${TYPE}")
                else
                    BLACKLISTS="${DOMAIN}=${FILTER}#${TYPE}"
                fi
            fi
            fi
        else
            info 0 "${YELLOW}Warning: list entry '${BL}' is not valid and will be ignored${CLEAR}"
        fi
    fi
done

# Make sure we have at least one blacklist
if [[ "${COUNT}" -eq 0 ]]; then
    error "No blacklists have been specified"
fi
info 1 "Matching against ${COUNT} entries:"
info 1 "  - ${COUNT_DNSBL} DNS blacklists"
info 1 "  - ${COUNT_DNSWL} DNS whitelists"
info 1 "  - ${COUNT_URIBL} URI blacklists"

export -f check info error resolve text progress
export REGEX_LIST REVERSED TARGET VERIFY_BL VERBOSE PLAIN COUNT YELLOW CLEAR RED GREEN SPINNER REGEX_IP REGEX_DOMAIN CMD_DIG DNSSERVER CONF_DNS_DURATION CONF_DNS_TRIES REGEX CMD_HOST CMD COUNT_FILE
parallel -j "${CONF_USE_OF_CORES}" 'check {#} {}' ::: ${BLACKLISTS}

# Initialize the counters
INVALID=$(grep -o 'I' "${COUNT_FILE}" | wc -l)
PASSED=$(grep -o 'P' "${COUNT_FILE}" | wc -l)
FAILED=$(grep -o 'F' "${COUNT_FILE}" | wc -l)
WHITE=$(grep -o 'W' "${COUNT_FILE}" | wc -l)


# Print results
if [[ "${VERBOSE}" -ge 0 ]]; then
    if [[ -z "${PLAIN}" ]]; then
        printf "\r                                                    \n"
    else
        printf "                                                     \n"
    fi
    echo "----------------------------------------------------------"
    echo Results for "${TARGET}"
    echo
    printf "%-15s" "Tested:";   echo "${COUNT}"
    printf "%-15s" "Passed:";   echo "${GREEN}${PASSED}${CLEAR}"
    printf "%-15s" "Whitelisted:";  echo "${GREEN}${WHITE}${CLEAR}"
    printf "%-15s" "Invalid:";  echo "${YELLOW}${INVALID}${CLEAR}"
    printf "%-15s" "Blacklisted:";  echo "${RED}${FAILED}${CLEAR}"
    echo "----------------------------------------------------------"
fi

cleanup

if [[ "${FAILED}" -gt 0 ]]; then
    if [[ "${VERBOSE}" -eq -1 ]]; then
        echo "${FAILED}"
    fi
    exit 1
fi

# vim: tabstop=4: shiftwidth=4: expandtab:
